set langmenu=en              " ËÆæÁΩÆÁïåÈù¢‰∏∫Ëã±Êñá
set backspace=2              " ËÆæÁΩÆÈÄÄÊ†ºÈîÆÂèØÁî®
set autoindent               " Ëá™Âä®ÂØπÈΩê
set ai!                      " ËÆæÁΩÆËá™Âä®Áº©Ëøõ
set smartindent              " Êô∫ËÉΩËá™Âä®Áº©Ëøõ
set relativenumber           " ÂºÄÂêØÁõ∏ÂØπË°åÂè∑
set nu!                      " ÊòæÁ§∫Ë°åÂè∑
set ruler                    " Âè≥‰∏ãËßíÊòæÁ§∫ÂÖâÊ†á‰ΩçÁΩÆÁöÑÁä∂ÊÄÅË°å
set incsearch                " ÂºÄÂêØÂÆûÊó∂ÊêúÁ¥¢ÂäüËÉΩ
set hlsearch                 " ÂºÄÂêØÈ´ò‰∫ÆÊòæÁ§∫ÁªìÊûú
" set nowrapscan               " ÊêúÁ¥¢Âà∞Êñá‰ª∂‰∏§Á´ØÊó∂‰∏çÈáçÊñ∞ÊêúÁ¥¢
set autoread                 " Ëá™Âä®ËØªÂèñÈáçÊñ∞ËΩΩÂÖ•
set nocompatible             " ÂÖ≥Èó≠ÂÖºÂÆπÊ®°Âºè
set hidden                   " ÂÖÅËÆ∏Âú®ÊúâÊú™‰øùÂ≠òÁöÑ‰øÆÊîπÊó∂ÂàáÊç¢ÁºìÂÜ≤Âå∫
set autochdir                " ËÆæÂÆöÊñá‰ª∂ÊµèËßàÂô®ÁõÆÂΩï‰∏∫ÂΩìÂâçÁõÆÂΩï
set foldmethod=indent        " ÈÄâÊã©‰ª£Á†ÅÊäòÂè†Á±ªÂûã
set foldlevel=100            " Á¶ÅÊ≠¢Ëá™Âä®ÊäòÂè†
set laststatus=2             " ÂºÄÂêØÁä∂ÊÄÅÊ†è‰ø°ÊÅØ
set cmdheight=1              " ÂëΩ‰ª§Ë°åÁöÑÈ´òÂ∫¶ÔºåÈªòËÆ§‰∏∫1ÔºåËøôÈáåËÆæ‰∏∫2
set autoread                 " ÂΩìÊñá‰ª∂Âú®Â§ñÈÉ®Ë¢´‰øÆÊîπÊó∂Ëá™Âä®Êõ¥Êñ∞ËØ•Êñá‰ª∂
set nobackup                 " ‰∏çÁîüÊàêÂ§á‰ªΩÊñá‰ª∂
set noswapfile               " ‰∏çÁîüÊàê‰∫§Êç¢Êñá‰ª∂
set list                     " ÊòæÁ§∫ÁâπÊÆäÂ≠óÁ¨¶ÔºåÂÖ∂‰∏≠Tab‰ΩøÁî®È´ò‰∫Æ~‰ª£ÊõøÔºåÂ∞æÈÉ®Á©∫ÁôΩ‰ΩøÁî®È´ò‰∫ÆÁÇπÂè∑‰ª£Êõø
set listchars=tab:‚Ä∫\ ,trail:‚Ä¢,extends:>,precedes:<,nbsp:.
set expandtab                " Â∞Ü Tab Ëá™Âä®ËΩ¨ÂåñÊàêÁ©∫Ê†º [ÈúÄË¶ÅËæìÂÖ•ÁúüÊ≠£ÁöÑ Tab Á¨¶Êó∂Ôºå‰ΩøÁî® Ctrl+V + Tab]
set updatetime=50
set mouse=a                  " Èº†Ê†áÂèØÁî®
set clipboard=unnamed        " ËÆæÁΩÆÂâ™Ë¥¥Êùø

" ÂÖ≥Èó≠previewÈ¢ÑËßàÁ™óÂè£,YCMÁöÑÈ¢ÑËßàÁ™óÂè£‰πüÂèØ‰ª•Áî®g:ycm_autoclose_preview_window_after_insertionÈÖçÁΩÆ,ËØ¶ÊÉÖ:help YCM
set completeopt-=preview

let &colorcolumn=join(range(121,999),",")  " Ë∂ÖËøá120ÁöÑË°åÂÆΩÈÉ®ÂàÜÈ¢úËâ≤‰∏ç‰∏ÄËá¥
set encoding=utf-8
set fileencoding=utf-8
set fileencodings=ucs-bom,utf-7,latin1
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1
set termencoding=utf-8
" set fileencodings=ucs-bom,utf-8,utf-16,gbk,big5,gb18030,latin1
" set fileencoding=utf-8,gbk,gb18030            "ÂΩìÂâçÁºñËæëÁöÑÊñá‰ª∂ÁºñÁ†Å

let mapleader=";"
let g:neocomplcache_enable_at_startup = 1
filetype plugin indent on



set guioptions-=e
set guioptions-=l
set guioptions-=L
set guioptions-=r
set guioptions-=R
set guioptions-=m
set guioptions-=T

" --------------- Plug -------------------
call plug#begin('~/.vim/plugged')
Plug 'itchyny/lightline.vim'
Plug 'scrooloose/nerdcommenter'                                                 " Ê≥®Èáä
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }                          " Êñá‰ª∂Ê†ë
Plug 'airblade/vim-gitgutter'                                                   " Ë°åÂè∑ÊòæÁ§∫ÊîπÂä®‰ø°ÊÅØ
Plug 'Xuyuanp/nerdtree-git-plugin', { 'on': 'NERDTreeToggle'}                   " Êñá‰ª∂Ê†ëgit
Plug 'sheerun/vim-polyglot'                                                     " ËØ≠Ë®ÄÂåÖ
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries', 'for': 'go' }                              " golang Â∑•ÂÖ∑ÂåÖ
Plug 'tpope/vim-fugitive'                                                       " git diff
Plug 'gregsexton/gitv'                                                          " git log
" Plug 'kien/ctrlp.vim'                                                           " Êñá‰ª∂ÊêúÁ¥¢
Plug 'Valloric/YouCompleteMe', { 'do': '~/.vim/plugged/YouCompleteMe/install.sh'}                 " ‰ª£Á†ÅË°•ÂÖ®
Plug 'Yggdroot/indentLine'                                                      " ÂØπÈΩêËæÖÂä©Á∫ø

" ËÆæÁΩÆÈ°πÁõÆÊ†πÁõÆÂΩï
Plug 'airblade/vim-rooter'
Plug 'tpope/vim-rails'                                                          " rails Êèí‰ª∂
Plug 'vim-ruby/vim-ruby'
Plug '/usr/local/opt/fzf'
Plug 'junegunn/fzf.vim' " { 'on': 'Files' }
Plug 'mileszs/ack.vim'
Plug 'dyng/ctrlsf.vim'                                                          " ÂÖ®ÊñáÊêúÁ¥¢Êèí‰ª∂
" Plug 'nsf/gocode', { 'rtp': 'vim', 'do': '~/.vim/plugged/gocode/vim/symlink.sh' }
" Plug 'mdempsky/gocode', { 'rtp': 'vim', 'do': '~/.vim/plugged/gocode/vim/symlink.sh' }

" color schema
Plug 'gosukiwi/vim-atom-dark'
Plug 'tomasr/molokai'
Plug 'ayu-theme/ayu-vim' " or other package manager
Plug 'altercation/solarized'
call plug#end()


set termguicolors     " enable true colors support
let ayucolor="light"  " for light version of theme
let ayucolor="mirage" " for mirage version of theme
let ayucolor="dark"   " for dark version of theme
colorscheme molokai

syntax enable
" ---------- lightline ------------
let g:lightline = {
      \ 'colorscheme': 'solarized',
      \ }
" ------------YouCompleteMe ---------
let g:ycm_error_symbol = '>>'
let g:ycm_warning_symbol = '>>'
let g:ycm_auto_trigger = 1   " Ëá™Âä®ÂºπÂá∫ÊèêÁ§∫
" let g:ycm_always_populate_location_list = 1
" let g:ycm_autoclose_preview_window_after_completion = 1
" let g:ycm_autoclose_preview_window_after_insertion = 1

" ------------- gocode ---------------
let g:go_echo_go_info = 0

" --------------- vim-polyglot -----------
let g:polyglot_disabled = ['markdown']

" -------------- fzf + ag -----------------
" ÊÑüËßâüëá‰∏ãÈù¢ÁöÑ ctrlsf ÂäüËÉΩÊõ¥Âä†Âº∫Â§ß
nnoremap <Leader>\ :Ack!<Space>
command! -bang -nargs=* Ag
      \ call fzf#vim#ack(<q-args>,
      \                 <bang>0 ? fzf#vim#with_preview('up:60%')
      \                         : fzf#vim#with_preview('right:50%:hidden', '?'),
      \                 <bang>0)

" --------------- ctrlsf ----------------
let g:ctrlsf_context = '-B 2 -A 2'
let g:ctrlsf_default_root = 'project'
let g:ctrlsf_default_view_mode = 'compact'
let g:ctrlsf_winsize = '30%'
let g:ctrlsf_selected_line_hl = 'op'
let g:ctrlsf_auto_focus = {
       \ "at" : "start",
       \ }
let g:ctrlsf_position = 'left'
let g:ctrlsf_mapping = {
      \ "openb": { "key": "o", "suffix": "<C-w>p" },
      \ "next": { "key": ["n", "<C-j>"] },
      \ "prev": { "key": ["N", "<C-k>"] },
      \ }

" --------------- nerdcommenter --------------
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1

" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'

" Set a language to use its alternate delimiters by default
let g:NERDAltDelims_java = 1

" Add your own custom formats or override the defaults
let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }

" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1

" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

" Enable NERDCommenterToggle to check all selected lines is commented or not 
let g:NERDToggleCheckAllLines = 1


" --------------- nerdtree ---------------
let g:NERDTreeDirArrowExpandable = '‚ñ∏'
let g:NERDTreeDirArrowCollapsible = '‚ñæ'
let NERDTreeShowHidden=1

" --------------- nerdtree-git-plugin --------------
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "‚úπ",
    \ "Staged"    : "‚úö",
    \ "Untracked" : "‚ú≠",
    \ "Renamed"   : "‚ûú",
    \ "Unmerged"  : "‚ïê",
    \ "Deleted"   : "‚úñ",
    \ "Dirty"     : "‚úó",
    \ "Clean"     : "‚úîÔ∏é",
    \ 'Ignored'   : '‚òí',
    \ "Unknown"   : "?"
    \ }

" --------------- ctrlp ------------------
" let g:ctrlp_map = '<c-p>'
" let g:ctrlp_cmd = 'CtrlP'

" -------------fzf and ag-settings---------------------
nmap <C-o> :tabnew<CR>:Files<CR>
nmap <C-p> :Files<CR>
nmap <Leader>s :Ack!<CR>
if executable('ag')
    let g:ackprg = 'ag --vimgrep --ignore node_modules --ignore dist'
    let g:ackpreview = 1
endif

" search lines in files
cnoreabbrev Ack Ack!

" -------------nerd-commenter--------------------
let g:NERDSpaceDelims = 1
let g:NERDCompactSexyComs = 1

" ------------------ git --------------------
let g:gitgutter_sign_added = 'A'
let g:gitgutter_sign_modified = 'M'
let g:gitgutter_sign_removed = 'R'
let g:gitgutter_sign_removed_first_line = '‚úã'
let g:gitgutter_sign_modified_removed = 'üò≥'

" ------------------- vim-go -------------------

let g:go_fmt_command = "goimports"
let g:go_metalinter_enabled = ['vet', 'golint', 'errcheck']
let g:go_def_mode = 'godef'
let g:go_decls_includes = "func,type"

" ----------------- ctags -----------------------
let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
\ }

" ------------------ mapping -------------------

nmap <Leader>y "*y
nmap <Leader>p "*gp
nmap <Leader><space> :nohlsearch<cr>
nmap <Leader>t :NERDTreeToggle<CR>
nnoremap <Leader>f :CtrlSF<Space>
nnoremap <Leader><Space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>
nnoremap <C-\> gt
nnoremap <Leader>m :tabc<CR>
nnoremap <Leader>n :tabnew<CR>
nnoremap <Leader>d :vsp<CR>
nnoremap <Leader>D :sp<CR>
nnoremap <Leader>q :q<CR>
nnoremap <C-m> :tabc<CR>
nnoremap <C-n> :tabnew<CR>
nnoremap <tab> <C-W><C-W>
nnoremap <C-S-UP> dd<UP>P
nnoremap <C-S-DOWN> ddp
nnoremap <C-h> ^
nnoremap <C-l> $
imap <C-S-UP> <esc>dd<UP>Pi
imap <C-S-DOWN> <esc>ddpi

" ------------- macvim Âø´Êç∑ÈîÆ -----------
" command + d
map <D-d> dd
imap <D-d> <esc>ddi
" command + shift + f
nmap <D-F> :CtrlSF<Space>
imap <D-F> <esc>:CtrlSF<Space>
" command + shift + h
nmap <D-H> v^
imap <D-H> <esc>v^
" command + shift + l
nmap <D-L> v$<left>
imap <D-L> <esc>v$<left>
" command + shift + p
nmap <D-P> :Files<CR>
imap <D-P> <esc>:Files<CR>
" command + /
imap <D-/> <esc>;cc
nmap <D-/> ;cc


" Ctrl + ]            Â§öÈÄâÊã©Ë∑≥ËΩ¨
nmap <c-]> g<c-]>
vmap <c-]> g<c-]>

" Ctrl + T            Ë∑≥ÂõûÂéü‰ΩçÁΩÆ
nmap <c-t> :pop<cr>

" Ctrl + U            ÁÆÄÂåñÂÖ®ËÉΩË°•ÂÖ®ÊåâÈîÆ
imap <c-u> <c-x><c-o>

" ÁºñËæëÊ®°Âºè‰∏ã‰πüËÉΩÁøªÈ°µ
imap <c-b> <esc><c-b>i
imap <c-f> <esc><c-f>i

" Ctrl + H            ÂÖâÊ†áÁßªÂΩìÂâçË°åË°åÈ¶ñ[ÊèíÂÖ•Ê®°Âºè]„ÄÅÂàáÊç¢Â∑¶Á™óÂè£[Normal Ê®°Âºè]
imap <c-h> <left>

" Ctrl + J            ÂÖâÊ†áÁßª‰∏ã‰∏ÄË°åË°åÈ¶ñ[ÊèíÂÖ•Ê®°Âºè]„ÄÅÂàáÊç¢‰∏ãÁ™óÂè£[Normal Ê®°Âºè]
imap <c-j> <down>

" Ctrl + K            ÂÖâÊ†áÁßª‰∏ä‰∏ÄË°åË°åÂ∞æ[ÊèíÂÖ•Ê®°Âºè]„ÄÅÂàáÊç¢‰∏äÁ™óÂè£[Normal Ê®°Âºè]
imap <c-k> <up>

" Ctrl + L            ÂÖâÊ†áÁßªÂΩìÂâçË°åË°åÂ∞æ[ÊèíÂÖ•Ê®°Âºè]„ÄÅÂàáÊç¢Âè≥Á™óÂè£[Normal Ê®°Âºè]
imap <c-l> <right>

" \gd                 ÊâìÂºÄ Git Êñá‰ª∂ÂØπÊØîÊ®°Âºè [Á´ñÁõ¥] [GitGutter Êèí‰ª∂]
nmap <leader>gd :Gvdiff<cr>
" ÊâìÂºÄlog(~= gloga), Âπ∂Êü•Áúãcommit„ÄÇ[gitvÊèí‰ª∂]
nmap <leader>gg :gitv --all<cr>

" \rt                 ‰∏ÄÈîÆÊõøÊç¢ÂÖ®ÈÉ® Tab ‰∏∫Á©∫Ê†º
nmap <leader>rt <esc>:retab<cr>
" Ë∂ÖËøá120ÁöÑË°åÂÆΩÊòæÁ§∫ÁÅ∞Ëâ≤
highlight ColorColumn guibg=#2d2d2d ctermbg=0

" insertÊ®°Âºè‰∏ã,Âêë‰∏ãÊªöÂ±è
imap <c-e> <esc><c-e>i
" insertÊ®°Âºè‰∏ã,Âêë‰∏äÊªöÂ±è
imap <c-y> <esc><c-y>i
